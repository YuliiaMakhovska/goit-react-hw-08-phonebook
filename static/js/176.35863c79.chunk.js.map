{"version":3,"file":"static/js/176.35863c79.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacs.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nexport const Label = styled.label`\n  display: flex;\n  margin: 10px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  color: black;\n  font-size: 18px;\n  cursor: pointer;\n  p {\n    margin: 8px;\n    color: red;\n  }\n`;\nexport const FieldStyled = styled(Field)`\n  margin-top: 10px;\n  height: 25px;\n  width: 220px;\n  border: 1px solid #030e1845;\n  border-radius: 3px;\n  box-shadow: 0 0 3px 1px;\n`;\nexport const Button = styled.button`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  cursor: pointer;\n  min-width: 170px;\n  heigth: 25px;\n  background-color: #fff000;\n  border-radius: 12px;\n  color: #000;\n  font-weight: bold;\n  padding: 10px 15px;\n  text-align: center;\n  transition: 200ms;\n  box-sizing: border-box;\n  border: 0;\n  font-size: 16px;\n  &:hover,\n  &:focus {\n    outline: 0;\n    background: #f4e603;\n    box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.2), 0 3px 8px 0 rgba(0, 0, 0, 0.15);\n  }\n`;\n","export const selectItems = state => state.contacts.items;\nexport const selectFilter = state => state.filter.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import React from 'react';\nimport * as Yup from 'yup';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\nimport { FormStyled, FieldStyled, Label, Button } from './ContactForm.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectItems, selectIsLoading } from 'redux/selectors';\nimport { addContacts } from 'redux/operations';\nimport Loader from 'components/Loader/Loader';\n\n\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required(),\n  number: Yup.number().required().positive().integer(),\n});\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={massege => <p>{massege}</p>} />;\n};\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectItems)\n  const isLoading = useSelector(selectIsLoading)\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    let existName = false;\n    if (contacts && contacts.length > 0) {\n      contacts.forEach(({ name }) => {\n  if (values.name.toLowerCase() === name.toLowerCase()) {\n    Report.failure(`${existName} is already in contacts`);\n    existName = true;\n  }\n})\n    }\n    if (!existName) {\n      dispatch(addContacts(values))\n      resetForm();\n      Report.success('You added new contact')\n    }\n\n  };\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled>\n        <Label htmlFor=\"name\" >\n          Name\n          <FieldStyled\n            type=\"text\"\n            name=\"name\"\n            placeholder='Enter name'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <FormError FormError name=\"name\" />\n        </Label>\n\n        <Label htmlFor=\"number\" >\n          Number\n          <FieldStyled\n            type=\"tel\"\n            name=\"number\"\n            placeholder='Enter number'\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <FormError FormError name=\"number\" />\n        </Label>\n        <Button type=\"submit\">Add contact {isLoading && <Loader /> }</Button>\n      </FormStyled>\n    </Formik>\n  );\n};\n\n\nexport default ContactForm;","import styled from '@emotion/styled';\n\nexport const ListDelBtn = styled.button`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    cursor: pointer;\n      width: 100px;\n  height: 22px;\n      font-size: 16px;\n    margin: 5px;\n    margin-left: 20px;\n    color: #fff;\n    background: linear-gradient(180deg, #4b91f7 0%, #367af6 100%);\n    border: 1px solid #030e1845;\n    border-radius: 3px;\n    &:hover {\n      box-shadow: inset 0px 0.8px 0px -0.25px rgba(255, 255, 255, 0.2),\n        0px 0.5px 1.5px rgba(54, 122, 246, 0.25),\n        0px 0px 0px 3.5px rgba(58, 108, 217, 0.5);`;\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nexport const List = styled.ul`\n  gap: 15px;\n  display: flex;\n  flex-direction: column;\n  padding-left: 20px;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter, selectItems, selectIsLoading } from 'redux/selectors';\nimport { List, ListDelBtn, ListItem } from './ContactsList.styled';\nimport { deleteContact } from 'redux/operations';\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectItems);\n  const filter = useSelector(selectFilter)\n  const isLoading = useSelector(selectIsLoading)\n  const dispatch = useDispatch();\n\n    const filteredContacts = !filter\n    ? contacts\n    : contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n\n    return (\n    <List>\n      {filteredContacts.map(({ id , name, number }) => (\n        <ListItem key={id}>\n          {name}: {number}\n          <ListDelBtn type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete{isLoading && <Loader />}\n          </ListDelBtn>\n        </ListItem>\n      ))}\n        </List>\n  );\n};\nexport default ContactsList;","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 20px;\n  width: 300px;\n  justify-content: center;\n  align-items: center;\n  color: teal;\n  font-size: 18px;\n  font-weight: bold;\n  cursor: pointer;\n`;\n\nexport const InputFilter = styled.input`\n  margin: 10px;\n  height: 25px;\n  width: 220px;\n  border: 1px solid #030e1845;\n  border-radius: 3px;\n  box-shadow: 0 0 3px 1px;\n`;\n","\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport {Label, InputFilter} from './Filter.styled'\n\nconst Filter = () => {\n    const value = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    return (<Label>Find contacts<InputFilter type=\"text\"\n        value={value}\n        onChange={e => dispatch(setFilter(e.currentTarget.value))} />\n    </Label>);\n};\n\nexport default Filter;","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 400px;\n  border: 1px solid #212121;\n  padding-top: 30px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  box-shadow: 0 0 3px 1px;\n  border-radius: 10px;\n  margin: 0 auto;\n  margin-top: 50px;\n  background-color: #8ec5fc;\n  background-image: linear-gradient(62deg, #8ec5fc 0%, #e0c3fc 100%);\n`;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter';\nimport { Container } from './Contacs.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\n// import Loader from 'components/Loader/Loader';\nimport { selectIsLoading, selectError } from 'redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  \n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n      return (<Container>\n        {/* <AppBar /> */}\n      <h1>Phonebook</h1>\n      <ContactForm  /> \n      <h2>Contacts</h2>\n        <Filter />\n      {isLoading && !error}\n        <ContactsList />\n    </Container>\n    )\n}\nexport default Contacts;"],"names":["FormStyled","styled","Form","Label","FieldStyled","Field","Button","selectItems","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","schema","Yup","shape","name","required","number","positive","integer","FormError","render","massege","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","existName","length","forEach","toLowerCase","Report","addContacts","htmlFor","type","placeholder","pattern","title","Loader","ListDelBtn","ListItem","List","filteredContacts","contact","includes","map","id","onClick","deleteContact","InputFilter","value","onChange","e","setFilter","currentTarget","Container","useEffect","fetchContacts"],"sourceRoot":""}